services:
  # PostgreSQL for User Service
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ecommerce_users
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/user-service/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./backend/product-service/schema.sql:/docker-entrypoint-initdb.d/02-schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5


  # Redis for caching
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass redis123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # OpenSearch
  opensearch:
    image: opensearchproject/opensearch:2.11.1
    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch-node1
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - DISABLE_SECURITY_PLUGIN=true
      - DISABLE_INSTALL_DEMO_CONFIG=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch_data:/usr/share/opensearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # OpenSearch Dashboards
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:2.11.1
    environment:
      - OPENSEARCH_HOSTS=["http://opensearch:9200"]
      - DISABLE_SECURITY_DASHBOARDS_PLUGIN=true
    ports:
      - "5601:5601"
    depends_on:
      opensearch:
        condition: service_started

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.126.0
    command: ["--config=/etc/otel-collector-config.yaml"]
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "55679:55679" # zpages extension
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    depends_on:
      - opensearch

  # User Service
  user-service:
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ecommerce_users
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres123
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://otel-collector:4317
      OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: http://otel-collector:4317
      OTEL_SERVICE_NAME: user-service
      FLAGD_HOST: flagd
      FLAGD_PORT: 8013
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      otel-collector:
        condition: service_started
      flagd:
        condition: service_started

  # Product Service
  product-service:
    build:
      context: ./backend/product-service
      dockerfile: Dockerfile
    environment:
      NODE_ENV: development
      PORT: 3003
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ecommerce_products
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres123
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      REDIS_DB: 1
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://otel-collector:4317
      OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: http://otel-collector:4317
      OTEL_SERVICE_NAME: product-service
      FLAGD_HOST: flagd
      FLAGD_PORT: 8013
    ports:
      - "3003:3003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      otel-collector:
        condition: service_started
      flagd:
        condition: service_started

  # Cart Service
  cart-service:
    build:
      context: ./backend/cart-service
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
    environment:
      NODE_ENV: development
      PORT: 3002
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      JWT_SECRET: your-secret-key-change-in-production
      CART_TTL: 86400
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_SERVICE_NAME: cart-service
    ports:
      - "3002:3002"
    depends_on:
      redis:
        condition: service_healthy
      otel-collector:
        condition: service_started

  # Angular Frontend with SSR
  frontend:
    build:
      context: ./frontend/angular-app
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
      PORT: 80
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_SERVICE_NAME: ecommerce-frontend-ssr
      OTEL_RESOURCE_ATTRIBUTES: "service.namespace=ecommerce,deployment.environment=production"
    ports:
      - "4000:80"
    depends_on:
      - user-service
      - product-service
      - cart-service
      - otel-collector
      - flagd

  # Nginx reverse proxy for frontend
  nginx:
    build:
      context: ./backend/nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    volumes:
      - ./backend/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
      - user-service
      - product-service
      - cart-service
      - otel-collector
      - flagd

  # Feature Flag Service (flagd)
  flagd:
    image: ghcr.io/open-feature/flagd:latest
    command: ["start", "--uri", "file:/etc/flagd/flags.json"]
    ports:
      - "8013:8013"  # gRPC
      - "8014:8014"  # HTTP/Management (health, metrics)
      - "8016:8016" # metrics
    volumes:
      - ./flagd-config.json:/etc/flagd/flags.json:ro
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8014/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.54
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://opensearch:9200
      - ES_VERSION=7  # OpenSearch is compatible with ES 7.x APIs
      - ES_INDEX_PREFIX=jaeger
      - ES_TAGS_AS_FIELDS_ALL=true
      - ES_BULK_SIZE=5000000
      - ES_BULK_WORKERS=1
      - ES_BULK_ACTIONS=1000
      - ES_BULK_FLUSH_INTERVAL=200ms
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      # Enable Service Performance Monitoring (SPM)
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus:9090
      - PROMETHEUS_QUERY_SUPPORT_SPANMETRICS_CONNECTOR=true
      - PROMETHEUS_QUERY_NAMESPACE=jaeger
      - PROMETHEUS_QUERY_DURATION_UNIT=ms
      - PROMETHEUS_QUERY_NORMALIZE_CALLS=true
      - PROMETHEUS_QUERY_NORMALIZE_DURATION=true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
      - "14250:14250"  # Jaeger gRPC
    depends_on:
      - prometheus
      - opensearch
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.48.1
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus-rules.yml:/etc/prometheus/prometheus-rules.yml:ro
      - prometheus_data:/prometheus
    depends_on:
      - otel-collector
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.2.3
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-opensearch-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
      - opensearch
      - jaeger
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:
  opensearch_data:
  prometheus_data:
  grafana_data: